Algorithms:
==========

Spinner/Die
===========
Note: for visuals see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function

This is implemented as a form of spinner, displaying a single face at a time and simulating a roll or spin by displaying a sequence of faces one by one (‘teasers’), finally stopping on a face (the ‘outcome’ of the roll). The change from one face to another is called a ‘rotation’.

The naïve implementation chooses the faces randomly, however this means that with 6 faces around a third of the time a face is repeated immediately during the ‘roll’. If there is no transition between the faces when they are being shown then this repetition appears as a stutter, with some faces seeming to show for longer than they should.

To prevent this stutter happening the faces shown most recently are excluded from selection. The number of faces excluded is user selected but must be at least 1 (to prevent stutter) and at most one less than the number of faces (otherwise no face could be chosen).

This strategy does however introduce a bias into the face selection, as not all faces have an equal chance of being selected at any one time. This is most apparent when using just two faces. In this case, excluding the most recent face forces the alternate face to be selected each time, leading to the deterministic sequence 1212121212… Since the face of the previous outcome is used as the starting face this therefore means the new outcome is fully determined by the number of rotations the die does before stopping.

One possible strategy to prevent this would be to start each roll with a face chosen completely unbiasedly, however this still has the stutter issue (albeit limited to the start of the roll). So instead a combined approach is used.

First, the length of the roll (i.e. the number rotations) is allowed to vary between rolls. The user can choose the range of the possible roll lengths. For example, the number of rotations could vary in the range between 9 and 12. Note that the width of the range could still allow some bias, for example with a two-faced die a range allowing between 6 and 8 rotations would favour the previous outcome being repeated by a ratio of 2:1.

Second, the roll is generated 'backwards'. Due to the symmetrical nature of the constraints - that a particular face cannot reappear for a specified number of rotations - a roll displayed in reverse is indistinguishable from one shown in the order generated. This allows the outcome to be generated unbiasedly and then the preceding faces are generated in reverse order starting from that final face. As these teasers are for display purposes only and have no practical effect it doesn't matter that their likelihoods are biased.

As only the current face is shown it is now simple to avoid a stutter at the start. If the final teaser is the same as the previous outcome then another teaser is generated. This is guaranteed to be different from the previous teaser and so will be different from the previous outcome. Note this ignores the exclusion rule chosen by the user.

[If more faces are showing: when only have teasers to generate equal to exclusion length then add all the showing faces as if they have been selected most recently and temporarily increase the excluded length by the number of faces showing - e.g. if excluding last 5 faces and 3 faces are showing then when have five teasers left to generate flag the three showing faces as having just been selected and increase the exclusion to the last 8 faces.]

Unstick
=======
Undo a 'stick' operation
Can only be used while player status is 'sticky'

When a player tries to stick:
  if their status is not 'rolling' then no action is taken
  if the dice status is 'rolling' then no action is taken
  else 
  player status is changed from 'rolling' to 'sticky'
  the current roll value is shown in the current entry of their 'rolled' record
  their new total is calculated
  their new total is displayed
  a countdown timer is started for triggering changing their status to 'stuck'
  if no players are 'rolling' then the run is ended
If a player tries to unstick
  if their status is not 'sticky' then no action is taken
  else 
  the countdown timer is cancelled
  their status is changed from 'sticky' to 'rolling'
  the current entry of their 'rolled' record is erased
  their current total is recalculated
  this new total is displayed

When a run starts:
  all 'stuck' players have their status changed to 'rolling'
  the die (dice) is (are) rolled 

When a roll starts:
  the die-status is changed to 'rolling'
  the 'roll button' is disabled
  any 'sticky' players have their status changed to 'stuck'
  the associated countdown timers are cancelled

When a roll ends:
  the die-status is changed to 'showing'
  the 'roll button' is enabled
  if the value showing is not 1 then
    the value showing is added to the current 'rolled' total
    the current 'rolled' total is displayed
  else
    the current 'rolled' total is set to zero
    the current 'rolled' total is displayed
    the run is ended

When a run ends:
  all 'rolling' players have their status changed to 'stuck'
  the current roll is added to the 'rolled' record of players still 'rolling' 
  all 'rolling' player totals are replaced by the new totals
   



Hide player
===========
Only available at the start of a new game before a run is started
Can not be used when in a run
When a saved list is used to populate the 'field' there may be a participant who is absent
This function allows the participant's name to be hidden - i.e. removed from the field

The croupier clicks on new game
The game board with list of players is shown - no strikethrough is shown
If Croupier clicks on a player 
If there is no line through the player
  a line is drawn through the player
otherwise if there is a line
  the line is removed
when the croupier clicks on New Run
All players with a line through them are hidden
Play starts


[Possible extension when have full editing]
When Edit is selected
  All players - including 'scratched' players - are displayed on the scoreboard, formatted by status 'scratched' or 'stuck'
  An 'OK' button is shown
  
Any player's status can be flipped between 'scratched' and 'stuck'

When 'OK' is clicked
  Only the 'stuck' players are displayed on the scoreboard
  The 'OK' is hidden
]
  



Create/Store/Select a field of players
=======================================
Different 'fields' of players (e.g. separate school classes) can be created, stored and then selected for a particular game.

Select field
List of fields available is shown
User selects one
Player names in that field are shown
User can scratch some
User then starts game

Player names are added in order to the scoreboard



Ranking
========
Assign a rank to each score
Create a linked list referencing the scores such that the first link points to the highest score, the next to the next highest, etc
Run through the list assigning a rank number to each score
Time complexity O(n^2)
Space complexity O(n)

// create sorted linked list
Set index to point to the first score.
Set head to point to the first score.
Set first score pointer/link to EndOfList
Repeat 
Set scoreIndex to point to the next score.
Set linkIndex to point to the first link.
If scoreToAdd > sortedScore then insert scoreToAdd before sortedScore
If EndOfList reached then insert scoreToAdd after sortedScore at end of list
Until score is inserted
// generate ranks
Set rankCount to 1
Set equalRank to False
Set index to point to the first score link.
Repeat
If equalRank is True then 
  if current score != next linked score then
    set equalRank to False
  endif
else (equalRank is False)
  if current score != next linked score or current score is EndOfList
    set rankValue to rankCount
  else
    set equalRank to True
    set rankValue to rankCount + '='
  endif
endif
set score rank to rankValue
Set index to point to the linked score link.
Increment rankCount
Until EndOfList reached


Alltime ranking assignment
==========================
The difficulty of comparing players comes from the many variations possible:
 Within a single group a player may miss a number of games;
 The die used in different games can be different;
 The die rolls and hence the possible runs are random, making some games low or high scoring.
On the other hand everything is held equal for all players in a particular game
This suggests that using pair results (win/draw/loss against every other player) gives the best ranking data.
All pair / duel / H2H / singles / face off wins, losses and draws are recorded
The ranking is calculated as a decimal from -1 to +1
Where +1 is best (all wins) and -1 is worst (all losses)
Wins count for +1, draws 0 and losses -1 points
The sum of a player's points is divided by the total number of games to give -1 to +1
This is the raw ranking
The ranking is then normalised based on maximum number of games that any single player has played (results ignored)
  e.g. if a player has a raw ranking of 
Draws are used 
Promotion/demotion
Players with all wins (ignoring draws) are promoted to +1
Players with all losses (ignoring draws) are demoted to -1
All wins (ignoring draws) = +1
All losses (ignoring draws) = -1
